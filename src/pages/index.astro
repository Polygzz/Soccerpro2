---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import AddSession from '../components/AddSession.astro';
import { supabaseClient } from '../utils/supabaseClient'; // Import supabaseClient

let user = null;

// Fetch the current user from Supabase
const {
  data: { user: currentUser }
} = await supabaseClient.auth.getUser();

if (currentUser) {
  console.log("User is signed in:", currentUser);
  user = currentUser;
} else {
  console.log("User is not signed in");
}
---
<Layout>
  <div class="fixed top-4 right-4 z-50">
    {user ? (
      <form method="post" action="/logout" class="inline">
        <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors duration-300">
          Logout
        </button>
      </form>
    ) : (
      <a href="/login" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors duration-300">
        Login
      </a>
    )}
  </div>

  <Navigation />
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-center text-textPrimary">Soccer Training Tracker</h1>

    <!-- Weather, Training Summary, AddSession Components Below -->
    <div class="weather-container mb-8 bg-boxColor p-6 rounded-lg shadow-md transition-shadow duration-300 hover:shadow-lg">
      <h2 class="text-xl font-bold mb-4 text-textPrimary">Local Weather</h2>
      <div id="weatherDisplay" class="flex items-center">
        <p class="text-textSecondary">Loading weather information...</p>
      </div>
      <div id="weatherRecommendation" class="mt-4 p-4 bg-accent text-white rounded">
        <h3 class="font-bold mb-2">Today's Training Recommendation:</h3>
        <p>Workout recommendations will appear here based on weather conditions.</p>
      </div>
      <div class="mt-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="zipcode">
          Change Location (ZIP Code)
        </label>
        <div class="flex">
          <input type="text" id="zipcode" placeholder="Enter ZIP code" class="shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
          <button id="updateLocationBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline">
            Update
          </button>
        </div>
      </div>
    </div>

    <div class="bg-boxColor p-6 rounded-lg shadow-md mb-8 transition-shadow duration-300 hover:shadow-lg">
      <h2 class="text-xl font-bold mb-4 text-textPrimary">Training Summary</h2>
      <div class="text-3xl font-bold text-primary" id="totalMinutes">0 minutes</div>
      <p class="text-textSecondary">Total training time</p>
    </div>

    <AddSession />
    <div id="sessions"></div>
  </main>
</Layout>

<!-- Scripts below -->
<script>
  const sessionsContainer = document.getElementById('sessions');
  const totalMinutesElement = document.getElementById('totalMinutes');
  const sessions = JSON.parse(localStorage.getItem('trainingSessions') || '[]');
  const updateLocationBtn = document.getElementById('updateLocationBtn');
  const locationInput = document.getElementById('zipcode');

  // Calculate and display total minutes
  const totalMinutes = sessions.reduce((total, session) => total + parseInt(session.duration), 0);
  if (totalMinutesElement) {
    totalMinutesElement.textContent = `${totalMinutes} minutes`;
  }

  // Sort and display sessions
  sessions.sort((a, b) => new Date(b.date) - new Date(a.date));
  if (sessionsContainer) {
    sessionsContainer.innerHTML = sessions.map(session => {
      return `
        <div class="bg-white p-6 rounded-lg shadow-md mb-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">${session.date}</h3>
            <span class="text-gray-600">${session.duration} minutes</span>
          </div>
          <div class="mb-3">
            <h4 class="font-medium mb-2">Skills Practiced:</h4>
            <div class="flex flex-wrap gap-2">
              ${session.skills.map(skill => `<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">${skill}</span>`).join('')}
            </div>
          </div>
          <p class="text-gray-700">${session.notes}</p>
        </div>
      `;
    }).join('');
  }

  const API_KEY = 'af770edc03304b4e8b6213518251604';

  async function getWeatherData(zip) {
    try {
      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${zip},US&units=metric&appid=${API_KEY}`);
      if (!response.ok) throw new Error('Location not found');
      const data = await response.json();
      displayWeather(data);
    } catch (error) {
      console.error(error);
      document.getElementById('weatherDisplay').innerHTML = '<p>Location not found.</p>';
    }
  }

  function displayWeather(data) {
    const temp = Math.round(data.main.temp);
    const description = data.weather[0].description;
    const iconUrl = `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;

    document.getElementById('weatherDisplay').innerHTML = `
      <img src="${iconUrl}" alt="${description}" class="w-16 h-16">
      <div class="ml-4">
        <div class="text-2xl font-bold">${temp}Â°C</div>
        <div class="capitalize">${description}</div>
        <div class="text-sm text-gray-600">Wind: ${data.wind.speed} m/s | Humidity: ${data.main.humidity}%</div>
      </div>
    `;

    updateWorkoutRecommendations(data);
  }

  function updateWorkoutRecommendations(data) {
    const temp = data.main.temp;
    const weatherCondition = data.weather[0].main;
    const windSpeed = data.wind.speed;
    let recommendation = '';

    if (temp > 30) {
      recommendation += 'Extreme heat alert! Consider indoor training. ';
    } else if (temp > 25) {
      recommendation += 'Hot conditions. Reduce intensity. ';
    } else if (temp < 0) {
      recommendation += 'Freezing! Indoor recommended. ';
    } else {
      recommendation += 'Great weather for training. ';
    }

    if (weatherCondition === 'Rain') {
      recommendation += 'Ball control might be tricky in rain.';
    }

    document.getElementById('weatherRecommendation').innerHTML = `
      <h3 class="font-bold mb-2">Today's Training Recommendation:</h3>
      <p>${recommendation}</p>
    `;
  }

  updateLocationBtn?.addEventListener('click', () => {
    const zip = locationInput?.value;
    if (zip) getWeatherData(zip);
  });

  locationInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      const zip = locationInput.value;
      if (zip) getWeatherData(zip);
    }
  });

  getWeatherData('10001'); // Default ZIP code
</script>
