---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import AddSession from '../components/AddSession.astro';
import TrainingSession from '../components/TrainingSession.astro';
import { isAuthenticated } from '../utils/auth';

// Check authentication status
const authenticated = await isAuthenticated(Astro.cookies);
console.log("Server-side authentication check result:", authenticated);

// Only redirect if absolutely necessary
if (!authenticated) {
  // On Netlify, we'll rely more on client-side auth check
  if (!import.meta.env.PROD) {
    return Astro.redirect('/login');
  }
}
---

<Layout>
  <div id="authLoader" class="fixed inset-0 bg-white z-50 flex items-center justify-center">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
      <p>Checking authentication...</p>
    </div>
  </div>

  <div id="appContent" class="hidden">
    <Navigation />
    <main class="container mx-auto px-4 py-8">
      {Astro.url.searchParams.get('login') === 'success' && (
        <div class="max-w-3xl mx-auto mb-6 p-4 bg-green-100 text-green-700 rounded-lg">
          Login successful! Welcome to Soccer Training Tracker.
        </div>
      )}
      
      <h1 class="text-3xl font-bold mb-8 text-center">Soccer Training Tracker</h1>
      
      <!-- Weather Container -->
      <div class="weather-container mb-8 bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Local Weather</h2>
        <div id="weatherDisplay" class="flex items-center">
          <p>Loading weather information...</p>
        </div>
        <div id="weatherRecommendation" class="mt-4 p-4 bg-blue-50 rounded">
          <p>Workout recommendations will appear here based on weather conditions.</p>
        </div>
        <div class="mt-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="location">
            Change Location
          </label>
          <div class="flex">
            <input
              type="text"
              id="location"
              placeholder="Enter city name"
              class="shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            />
            <button
              id="updateLocationBtn"
              class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline"
            >
              Update
            </button>
          </div>
        </div>
      </div>
      
      <div class="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 class="text-xl font-bold mb-4">Training Summary</h2>
        <div class="text-3xl font-bold text-blue-600" id="totalMinutes">0 minutes</div>
        <p class="text-gray-600">Total training time</p>
      </div>
      
      <AddSession />
      
      <div id="sessions">
        <!-- Sessions will be populated by JavaScript -->
      </div>
    </main>
  </div>
</Layout>

<script>
  import { supabaseClient } from '../utils/supabaseClient';
  
  // Client-side authentication check
  async function checkAuth() {
    console.log("Running client-side auth check...");
    
    try {
      // First check if we have local storage tokens (backup method)
      const localAuthData = localStorage.getItem('supabase.auth.token');
      
      // Try to get the session from Supabase
      const { data, error } = await supabaseClient.auth.getSession();
      
      console.log("Client auth check result:", !!data.session);
      
      if (!data.session) {
        if (localAuthData) {
          console.log("No session but found local tokens, trying to restore session");
          try {
            const tokens = JSON.parse(localAuthData);
            const { data: refreshData, error: refreshError } = await supabaseClient.auth.setSession({
              access_token: tokens.access_token,
              refresh_token: tokens.refresh_token
            });
            
            if (refreshError || !refreshData.session) {
              console.error("Failed to restore session:", refreshError);
              redirectToLogin();
            } else {
              console.log("Session restored successfully");
              showContent();
            }
          } catch (e) {
            console.error("Error parsing local auth data:", e);
            redirectToLogin();
          }
        } else {
          console.log("No session and no local tokens found");
          redirectToLogin();
        }
      } else {
        console.log("Session found, showing content");
        showContent();
      }
    } catch (err) {
      console.error("Authentication check error:", err);
      redirectToLogin();
    }
  }
  
  function redirectToLogin() {
    console.log("Redirecting to login page");
    window.location.href = '/login';
  }
  
  function showContent() {
    document.getElementById('authLoader').style.display = 'none';
    document.getElementById('appContent').classList.remove('hidden');
    initApp();
  }
  
  // Initialize the app functionality
  function initApp() {
    const sessionsContainer = document.getElementById('sessions');
    const totalMinutesElement = document.getElementById('totalMinutes');
    const sessions = JSON.parse(localStorage.getItem('trainingSessions') || '[]');
    const updateLocationBtn = document.getElementById('updateLocationBtn');
    const locationInput = document.getElementById('location');

    // Calculate total minutes
    const totalMinutes = sessions.reduce((total, session) => total + parseInt(session.duration), 0);
    if (totalMinutesElement) {
      totalMinutesElement.textContent = `${totalMinutes} minutes`;
    }

    // Sort sessions by date (newest first)
    sessions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

    // Display sessions
    if (sessionsContainer) {
      sessionsContainer.innerHTML = sessions.map(session => `
        <div class="bg-white p-6 rounded-lg shadow-md mb-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">${session.date}</h3>
            <span class="text-gray-600">${session.duration} minutes</span>
          </div>
          <div class="mb-3">
            <h4 class="font-medium mb-2">Skills Practiced:</h4>
            <div class="flex flex-wrap gap-2">
              ${session.skills.map(skill => `
                <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                  ${skill}
                </span>
              `).join('')}
            </div>
          </div>
          <p class="text-gray-700">${session.notes}</p>
        </div>
      `).join('');
    }

    // Weather functionality
    // Use your actual API key - I noticed this might be incorrect in your original code
    const API_KEY = 'af770edc03304b4e8b6213518251604';

    async function getWeatherData() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(async position => {
          const lat = position.coords.latitude;
          const lon = position.coords.longitude;
          
          try {
            // Using weatherapi.com with your API key format
            const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${lat},${lon}`);
            if (!response.ok) {
              throw new Error('Weather API request failed');
            }
            
            const data = await response.json();
            displayWeather(data);
          } catch (error) {
            console.error('Error fetching weather data:', error);
            document.getElementById('weatherDisplay').innerHTML = '<p>Unable to fetch weather data. Please try again later.</p>';
          }
        }, error => {
          console.error('Error getting location:', error);
          document.getElementById('weatherDisplay').innerHTML = 
            '<p>Location access denied. Please enable location services to see weather information.</p>';
        });
      } else {
        document.getElementById('weatherDisplay').innerHTML = 
          '<p>Geolocation is not supported by this browser.</p>';
      }
    }

    async function updateWeatherByLocation(location) {
      if (!location) return;
      
      try {
        // Using weatherapi.com with your API key format
        const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${location}`);
        if (!response.ok) {
          throw new Error('Location not found');
        }
        
        const data = await response.json();
        displayWeather(data);
      } catch (error) {
        console.error('Error:', error);
        document.getElementById('weatherDisplay').innerHTML = '<p>Location not found. Please try again.</p>';
      }
    }

    function displayWeather(data) {
      // Adjust this function to match weatherapi.com response format
      const current = data.current;
      const temp = Math.round(current.temp_c);
      const description = current.condition.text;
      const iconUrl = 'https:' + current.condition.icon;
      const windSpeed = current.wind_kph;
      const humidity = current.humidity;
      
      document.getElementById('weatherDisplay').innerHTML = `
        <img src="${iconUrl}" alt="${description}" class="w-16 h-16">
        <div class="ml-4">
          <div class="text-2xl font-bold">${temp}Â°C</div>
          <div class="capitalize">${description}</div>
          <div class="text-sm text-gray-600">Wind: ${windSpeed} km/h | Humidity: ${humidity}%</div>
        </div>
      `;
      
      updateWorkoutRecommendations(current);
    }

    function updateWorkoutRecommendations(weatherData) {
      const temp = weatherData.temp_c;
      const weatherCondition = weatherData.condition.text.toLowerCase();
      const windSpeed = weatherData.wind_kph;
      let recommendation = '';
      
      // Temperature-based recommendations
      if (temp > 30) {
        recommendation = 'Extreme heat alert! Consider indoor training or schedule your workout early morning or late evening. Stay hydrated and take frequent breaks.';
      } else if (temp > 25) {
        recommendation = 'Hot conditions. Reduce intensity, stay hydrated, and consider shorter sessions. Technical drills might be better than high-intensity runs.';
      } else if (temp < 5) {
        recommendation = 'Cold conditions. Extend your warm-up period and wear layers. Focus on maintaining movement to stay warm.';
      } else if (temp < 0) {
        recommendation = 'Freezing conditions! Consider indoor training. If outdoors, proper warm-up is essential and watch for icy patches.';
      } else {
        recommendation = 'Ideal temperature for training. All workout types recommended.';
      }
      
      // Weather condition recommendations
      if (weatherCondition.includes('rain')) {
        recommendation += ' Rainy conditions may affect ball control. Consider ball mastery drills under cover or focused technical work.';
      } else if (weatherCondition.includes('snow')) {
        recommendation += ' Snowy conditions - indoor training recommended. If outdoors, focus on balance and core stability work.';
      } else if (weatherCondition.includes('thunder') || weatherCondition.includes('storm')) {
        recommendation += ' WARNING: Thunderstorms detected. Move indoors immediately for safety.';
      } else if ((weatherCondition.includes('clear') || weatherCondition.includes('sunny')) && temp > 20) {
        recommendation += ' Clear skies - perfect for all training activities. Consider sunscreen if training for extended periods.';
      }
      
      // Wind recommendations
      if (windSpeed > 20) {
        recommendation += ' High winds may affect ball flight. Good opportunity to practice adapting to challenging conditions.';
      }
      
      document.getElementById('weatherRecommendation').innerHTML = `
        <h3 class="font-bold mb-2">Today's Training Recommendation:</h3>
        <p>${recommendation}</p>
      `;
    }

    // Event Listeners
    updateLocationBtn?.addEventListener('click', () => {
      const location = locationInput?.value;
      if (location) {
        updateWeatherByLocation(location);
      }
    });

    // Also trigger update when Enter is pressed
    locationInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        const location = locationInput.value;
        if (location) {
          updateWeatherByLocation(location);
        }
      }
    });

    // Initialize weather data on page load
    getWeatherData();

    // Refresh weather data every 30 minutes
    setInterval(getWeatherData, 30 * 60 * 1000);
  }
  
  // Start the authentication check when the page loads
  checkAuth();
</script>